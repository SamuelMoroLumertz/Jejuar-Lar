# -*- coding: iso-8859-1 -*-
import numpy as np
import cv2 as cv
import glob
# termination criteria
criteria = (cv.TERM_CRITERIA_EPS + cv.TERM_CRITERIA_MAX_ITER, 30, 0.001) # critério de parada para a função cv.cornerSubPix (1º parametro-> combinação de dois tipos de critérios de parada// 2º parametro->número máximo de iterações permitidas // 3º parametro-> precisao desejada)
# prepare object points, like (0,0,0), (1,0,0), (2,0,0) ....,(6,5,0)
objp = np.zeros((6*7,3), np.float32) #cria um vetor de pontos de objetos, que são as coordenadas 3D do tabuleiro de xadrez em um sistema de coordenadas do mundo real
objp[:,:2] = np.mgrid[0:7,0:6].T.reshape(-1,2) #preenche o vetor de pontos de objetos com as coordenadas (x, y) dos cantos do tabuleiro de xadrez em um sistema de coordenadas do mundo real
# Arrays to store object points and image points from all the images.
objpoints = [] # 3d point in real world space
imgpoints = [] # 2d points in image plane.
camera = cv.VideoCapture(0)
retcamera, img = camera.read()



gray = cv.cvtColor(img, cv.COLOR_BGR2GRAY)
# Find the chess board corners
ret, corners = cv.findChessboardCorners(gray, (7,6), None) #ret-> verifica se encontrou // corners-> array com as coordenadas
# If found, add object points, image points (after refining them)
if ret ==True:
    objpoints.append(objp) #adiciona os pontos de objetos à lista de pontos de objetos
    corners2 = cv.cornerSubPix(gray,corners, (11,11), (-1,-1), criteria) #refina as coordenadas
    imgpoints.append(corners) # adiciona os cantos refinados à lista de cantos da imagem
    # Draw and display the corners
    cv.drawChessboardCorners(img, (7,6), corners2, ret) #desenha os cantos encontrados na imagem original
    cv.imshow('img', img)

    ret, mtx, dist, rvecs, tvecs = cv.calibrateCamera(objpoints, imgpoints, gray.shape[::-1], None, None)
    img2 = img
    h,  w = img2.shape[:2]
    newcameramtx, roi = cv.getOptimalNewCameraMatrix(mtx, dist, (w,h), 1, (w,h))
    # undistort
    dst = cv.undistort(img2, mtx, dist, None, newcameramtx)
    # crop the image
    x, y, w, h = roi
    dst = dst[y:y+h, x:x+w]
    cv.imshow('calibresult', dst)

    cv.waitKey(0)

camera.release()
print('oi')
cv.destroyAllWindows()

=======================================================================================================================

# -*- coding: iso-8859-1 -*-
import numpy as np
import cv2 as cv

# termination criteria
criteria = (cv.TERM_CRITERIA_EPS + cv.TERM_CRITERIA_MAX_ITER, 30, 0.001) 

# prepare object points, like (0,0,0), (1,0,0), (2,0,0) ....,(6,5,0)
objp = np.zeros((6*7,3), np.float32) 
objp[:,:2] = np.mgrid[0:7,0:6].T.reshape(-1,2) 

# Arrays to store object points and image points from all the images.
objpoints = [] 
imgpoints = [] 

# Define the video capture object
cap = cv.VideoCapture(0)

while True:
    # Read a new frame
    ret, img = cap.read()
    if not ret:
        break
        
    gray = cv.cvtColor(img, cv.COLOR_BGR2GRAY)

    # Find the chess board corners
    ret, corners = cv.findChessboardCorners(gray, (7,6), None)

    # If found, add object points, image points (after refining them)
    if ret == True:
        objpoints.append(objp)
        corners2 = cv.cornerSubPix(gray,corners, (11,11), (-1,-1), criteria)
        imgpoints.append(corners2)

        # Draw and display the corners
        cv.drawChessboardCorners(img, (7,6), corners2, ret)
        cv.imshow('img', img)

    # Calibrate the camera if we have enough data
    if len(objpoints) > 10:
        print('entrou')
        ret, mtx, dist, rvecs, tvecs = cv.calibrateCamera(objpoints, imgpoints, gray.shape[::-1], None, None)
        h,  w = img.shape[:2]
        newcameramtx, roi = cv.getOptimalNewCameraMatrix(mtx, dist, (w,h), 1, (w,h))

        # undistort
        dst = cv.undistort(img, mtx, dist, None, newcameramtx)

        # crop the image
        x, y, w, h = roi
        dst = dst[y:y+h, x:x+w]
        cv.imshow('calibresult', dst)

    # Wait for user input to exit
    if cv.waitKey(1) & 0xFF == ord('q'):
        break

# Release the video capture object and destroy all windows
cap.release()
cv.destroyAllWindows()